{
  "//"= "Using for comment line code",
  "/* .... */"= "Using to comment a code block",
  "var"= "declares a variable, optionally initializing a value to it",
  "let"= "Declares a block-scoped, local variable, optionally initializing it to a value",
  "const" ="Declares a block-scoped, read-only named constant",
  "boolean type"= "true o false",
  "null type"= "keyword denoting a null value",
  "undefined"="a top-level propertu whose value is not defined",
  "number"= "An interger or floating point number",
  "string"="a sequence of characters tha represents a text value",
  "Array []" ="is a list of zero or more expressions",
  "block statment{}"="Is used to group statments",
  "if-else"="execute a statment if a logical condition is tru, an es clause to execute a statment if the condition is false",
  "promise"= "allow to control the flow of deferred and asyncrhronous operations",
  "for"= "loop that repeats until a specified condition evaluates to false",
  "label"= "provides a statment whit an identifier that lets you refer to it elsewhere in your program",
  "break"="statement to terminate a loop",
  "function declaration"="variables defined inside a function cannot be accessed from anywhere outside the function",
  "arrow function"="has a shorter syntax compared to function expressions and does not have its own this",
  "=="="returns trje if the operands are equal",
  "!="="returns true if the operands are not equal",
  "==="="returns true if the operands are equal and of the same type",
  "!=="="returns true if the operands are of the same type but not equal, or a of different type",
  ">"="returns true if the left operand is greater than the right operand",
  ">="="returns true if the left operand is greater than or equal to the right operand",
  "<"="returns true if the left operand is less than the right operand",
  "<="="returns true if the left operand is less than or eual to the right operand",
  "%"="Binary operator. Returns the intefer remainder of dividing the two operands",
  "++"="Unary operator. adds one to its operand",
  "--"="Unary operator. Substract one from its operand.The return value is analogous to that for the increment operator",
  "-"="returns the negation of its operand",
  "+"="Attempts to convert the operand to a number, if it is not already",
  "**"="Calculates the base to the exponent power, that is, base exponent"
}